// Generate with the following from the auction folder.
// protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative proto/auction.proto

syntax = "proto3";

option go_package = "auction/proto";

package auction;

// The Auction service definition.
service Auction {
  // Bidder client calls
  rpc Bid (BidRequest) returns (BidResponse);
  rpc Result (Empty) returns (ResultResponse);

  // Leader election calls
  rpc SendElection (ElectionRequest) returns (ElectionResponse);
  rpc AnnounceLeader (AnnounceLeaderRequest) returns (Empty);

  // Sync state
  rpc SyncState(SyncStateRequest) returns (Empty);
}

enum BID_STATUS {
  NOTACCEPTED = 0;
  ACCEPTED = 1;
  ISFINISHED = 2;
}

message BidRequest {
  int32 bidderId = 1;
  int32 bid = 2;
}

message BidResponse {
  BID_STATUS status = 1;
  int32 bidderId = 2;
  int32 bid = 3;
}

enum AUCTION_STATUS {
  NOTSTARTED = 0;
  ONGOING = 1;
  FINISHED = 2;
}

message ResultResponse {
  AUCTION_STATUS status = 1;
  int32 highestBid = 2;
  int32 bidderId = 3;
}

message Empty {}

message ElectionRequest {
  int32 nodeId = 1;
}

message ElectionResponse {
  bool Ok = 1;
}

message AnnounceLeaderRequest {
  int32 leaderId = 1;
}

message SyncStateRequest {
  int32 highestBid = 1;
  int32 highestBidderId = 2;
}

